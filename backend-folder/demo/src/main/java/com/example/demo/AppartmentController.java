package com.example.demo;

import org.assertj.core.util.Lists;
import org.assertj.core.util.Sets;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /demo (after Application path)
@CrossOrigin
public class AppartmentController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private AppartmentRepository appartmentRepository;
    @Autowired
    private BookingRepository bookingRepository;

    @RequestMapping(value = "/Apartments", method = RequestMethod.GET,
            produces = { "application/json", "application/xml" })
    public @ResponseBody Iterable<appartment> getAllAppartments()throws JSONException
    {
        return appartmentRepository.findAll();
    }
    @PutMapping("/Apartments/{id}")
    public @ResponseBody String changeApp(@RequestBody String jsonStr,@PathVariable String id) throws JSONException {
        JSONObject obj=new JSONObject(jsonStr);
        System.out.println("fuuuuuuuucK");
        String loggedInusn= SecurityContextHolder.getContext().getAuthentication().getName();
        appartment n=this.appartmentRepository.findById(Integer.parseInt(id)).get();
        if(!loggedInusn.equals(n.getOwnername()))
        {
            return "ERROR";
        } //NEED TO ADD THE IF ABOVE ON ALL THE APPARTMENT METHODS  TOMORROW
        n.setSize((float) obj.getDouble("size"));
        n.setAddress(obj.getString("address"));
        n.setAllowPets(obj.getBoolean("pets"));
        n.setAllowSmoking(obj.getBoolean("smoke"));
        n.setCapacity(obj.getInt("capacity"));
        n.setFloor(obj.getInt("floor"));
        n.setHasheat(obj.getBoolean("ac"));
        n.setHasParking(obj.getBoolean("parking"));
        n.setHasWifi(obj.getBoolean("wifi"));
        n.setIdAvailable(obj.getBoolean("idAvailable"));
        n.setPrice(obj.getInt("price"));
        n.setHasTv(obj.getBoolean("hasTv"));
        n.setCapacity(obj.getInt("capacity"));
        n.setLocation(obj.getString("country")+"+"+obj.getString("town")+"+"+obj.getString("neighborhood"));
        n.setHasElevator(obj.getBoolean("lift"));
        n.setDescription(obj.getString("description"));
        n.setLongitude(obj.getDouble("longitude"));
        System.out.println(obj.getDouble("longitude"));
        n.setLatitude(obj.getDouble("latitude"));
        n.setType(obj.getString("type"));
        n.setAccessInfo(obj.getString("accessInfo"));
        n.setNumberOfBeds(obj.getInt("numberOfBeds"));
        n.setCost_per_person(obj.getInt("cost-per-person"));
        n.setNumberOfBathrooms(obj.getInt("numberOfBathrooms" ));
       // n.setNumberOfBeds(obj.getInt("numberOfBeds"));
        n.setHasLivingRoom(obj.getBoolean("hasLivingRoom"));
        n.setMinDatesToBook(obj.getInt("minDatesToBook"));
        JSONArray jArray=obj.getJSONArray("Dates");
        ArrayList<String> listdata = new ArrayList<String>();
        if (jArray != null) {
            for (int i=0;i<jArray.length();i++){
                listdata.add(jArray.getString(i));
            }
        }
        n.setNumberOfBedrooms(obj.getInt("numberOfBedrooms"));
        n.setDates(listdata);
        //n.setDates((ArrayList<String>)obj.getJSONArray("Dates"));
        appartmentRepository.save(n);
        return "OK";
    }

    @PostMapping(path="/Apartments")
    public @ResponseBody Integer addNewAppartment(@RequestBody String jsonStr/*,@RequestParam("img")MultipartFile file*/) throws JSONException, IOException {

        JSONObject jObject = new JSONObject(jsonStr);
        String tempName=jObject.getString("Ownername");
        User result=userRepository.findById(tempName).get();

        //if(!result.get().getOwner())
        //  return "USER DOEN'T HAVE APPARTMENT OWNER PRIVILEGES";
        appartment n=new appartment();

        n.setOwner(result);
        String loggedInusn= SecurityContextHolder.getContext().getAuthentication().getName();
        if(!loggedInusn.equals(n.getOwner().getUserName()) || n.getOwner().getOwner()==false)
        {
            return -1 ;
        }//NEED TO ADD THE IF ABOVE ON ALL THE APPARTMENT METHODS  TOMORROW
        n.setSize((float) jObject.getDouble("size"));
        n.setHasheat(jObject.getBoolean("hasHeat"));
        n.setFloor(jObject.getInt("floor"));
        n.setPrice(jObject.getInt("Price"));
        n.setHasTv(jObject.getBoolean("hasTv"));
        n.setIdAvailable(jObject.getBoolean("idAvailable"));
        n.setAllowPets(jObject.getBoolean("AllowPets"));
        n.setAllowSmoking(jObject.getBoolean("AllowSmoking"));
        n.setAddress(jObject.getString("Address"));
        n.setHasParking(jObject.getBoolean("HasParking"));
        n.setHasWifi(jObject.getBoolean("HasWifi"));
        n.setLongitude(jObject.getDouble("longitude"));
        n.setLatitude(jObject.getDouble("latitude"));
        n.setCapacity(jObject.getInt("capacity"));
        JSONArray jArray=jObject.getJSONArray("Dates");
        n.setType(jObject.getString("type"));
        n.setAccessInfo(jObject.getString("accessInfo"));
        n.setHasElevator(jObject.getBoolean("lift"));
        n.setCost_per_person(jObject.getInt("cost-per-person"));
        ArrayList<String> listdata = new ArrayList<String>();
        if (jArray != null) {
            for (int i=0;i<jArray.length();i++){
                listdata.add(jArray.getString(i));
            }
        }
        n.setDates(listdata);
        ///now it is time to set location
        n.setLocation(jObject.getString("country")+"+"+jObject.getString("town")+"+"+jObject.getString("neighborhood"));
        //n.setMain_pic((byte[]) jObject.get("pic"));
        n.setNumberOfBedrooms(jObject.getInt("numberOfBedrooms"));
        n.setNumberOfBathrooms(jObject.getInt("numberOfBathrooms" ));
        n.setNumberOfBeds(jObject.getInt("numberOfBeds"));
        n.setHasLivingRoom(jObject.getBoolean("hasLivingRoom"));
        n.setMinDatesToBook(jObject.getInt("minDatesToBook"));
        appartmentRepository.save(n);
        return n.getId();
    }

    @GetMapping("/user/{usn}/Apartments")
    public @ResponseBody Iterable<appartment> getApartmentsByUsrID(@PathVariable String usn) throws JSONException
    {

        Optional<User> test =userRepository.findById(usn);
        if(!test.isPresent())
            return null;

        List<appartment> result=appartmentRepository.findAllByOwner(test.get());
        return  result;
    }
    @GetMapping("/Apartments/{id}")
    public @ResponseBody Optional<appartment> findAppById(@PathVariable Integer id){
        return this.appartmentRepository.findById(id);
    }

    //private helper function to get the dates required
    private  ArrayList<String> getDates(String startD,String endD){
        ArrayList<String> result=new ArrayList<String>();
        result.add(startD);
        String[] Array=startD.split("-");
        String sd,sm,sy;
        sd=Array[0];
        sm=Array[1];
        sy=Array[2];
        System.out.println(sd+"\n" +sm+"\n"+sy);
        for(int i=Integer.parseInt(sd)+1;i<=30;i++ ){
            String temp=i+"-"+sm+"-"+sy;
            result.add(temp);
            if(temp.equals(endD))
                return result;
        }
        String[] endArray=endD.split("-");
        int ed=Integer.parseInt(endArray[0]);
        int em=Integer.parseInt(endArray[1]);
        int ey=Integer.parseInt(endArray[2]);
        for(int year=Integer.parseInt(sy);year<=ey;year++){
            for(int month=Integer.parseInt(sm)+1; month<=em;month++){
                for(int day=1;day<=30;day++)
                {   String tempday=day+"-"+month+"-"+year;
                    result.add(tempday);
                    if(tempday.equals(endD))
                        return result;
                }
            }
        }


        return result;

    }
    @GetMapping("/Apartments/{capacity}/{startD}/{endD}/{country}/{city}/{neighborhood}")
    public @ResponseBody Iterable<appartment> getApartmentsByLocationDates(
            @PathVariable String capacity,
            @PathVariable  String startD, @PathVariable String endD,
            @PathVariable String country,@PathVariable String city
            ,@PathVariable  String neighborhood) throws  JSONException
    {

        String Location=country+"+"+ city +"+"+ neighborhood;
        List<appartment> opt=this.appartmentRepository.findByLocationAndCapacityGreaterThanEqualOrderByPrice(Location,Integer.parseInt(capacity));
        //System.out.println(opt);
       System.out.println(startD+endD);
        ArrayList<String> DatesRequired=this.getDates(startD,endD);
        List<appartment> result=new ArrayList<appartment>();
        System.out.println(DatesRequired);
        for(appartment app: opt){
            System.out.println(app.getDates());
            System.out.println(app.getId());
            System.out.println(DatesRequired);
            for(int i=0;i<DatesRequired.size();i++){
                if(!app.getDates().contains(DatesRequired.get(i)))
                    break;
                else
                    result.add(app);
            }
        }

        List<appartment> noDuplicates= Lists.newArrayList(Sets.newHashSet(result));
        //Collections.sort(noDuplicates,comparing(appartment::getPrice));
        return noDuplicates;
        // return null;
    }
    @DeleteMapping("/Apartment/{id}")
    public @ResponseBody String DeleteApartment(@PathVariable Integer id) throws JSONException{

        Optional<appartment> temp=appartmentRepository.findById(id);
        if(!temp.isPresent())
            return "ERROR";
        this.appartmentRepository.delete(temp.get());
        return "OK";
    }

    ///images
    @PostMapping("/Apartment/Profile-Image/{id}")
    public @ResponseBody String updateAppImage(@RequestParam("imgFile") MultipartFile file,@PathVariable String id) throws IOException {
        String loggedInusn= SecurityContextHolder.getContext().getAuthentication().getName();
        appartment temp=this.appartmentRepository.findById(Integer.parseInt(id)).get();
        if(!loggedInusn.equals(temp.getOwner().getUserName()) || temp.getOwner().getOwner()==false)
        {   System.out.println("ILLEGAL LOGIN");
            return "ERROR" ;
        }//NEED TO ADD THE IF ABOVE ON ALL THE APPARTMENT METHODS  TOMORROW
        System.out.println("fuck me");
        temp.setMain_pic(file.getBytes());
        this.appartmentRepository.save(temp);
        return "OK";
    }
    @GetMapping("/Apartment/Profile-Image/{id}")
    public @ResponseBody byte[] getAppImage(@PathVariable String id){
        return this.appartmentRepository.findById(Integer.parseInt(id)).get().getMain_pic();
    }
    @GetMapping("Apartments/{id}/OwnerInfo")
    public  @ResponseBody User getOwnerInfo(@PathVariable String id){
        User n=new User();
        User owner=this.appartmentRepository.findById(Integer.parseInt(id)).get().getOwner();
        n.setUserName(owner.getUserName());
        n.setPhoneNumber(owner.getPhoneNumber());
        n.setEmail(owner.getEmail());
        n.setFirstName(owner.getFirstName());
        n.setLastName(owner.getLastName());
        n.setPic(owner.getPic());
        return n;
    }
}
