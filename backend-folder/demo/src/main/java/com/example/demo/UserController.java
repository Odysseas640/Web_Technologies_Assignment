package com.example.demo;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@RestController // This means that this class is a Controller
@RequestMapping(path = "api")
@CrossOrigin
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private AppartmentRepository appartmentRepository;
    @Autowired
    private BookingRepository bookingRepository;
    //////////////////////////////////////////////////////////////
    ///USERS
    ////////////////////////////////////////////////////////////////
    @GetMapping("/user") //all users //only as admin
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        if(!this.getUserName().equals("admin1"))
            return  null;
        return userRepository.findAll();

    }
    @GetMapping("/user/usernames")
    public  @ResponseBody Iterable<String> getAllUserNames(){
        List <User> users= (List<User>) this.userRepository.findAll();
        List<String> result=new ArrayList<String>();
        for(User var :users){
            result.add(var.getUserName());
        }
        return  result;
    }
    @GetMapping("/user/UserName") //Get logged in user's username
    public  @ResponseBody String getUserName(){
        Authentication auth= SecurityContextHolder.getContext().getAuthentication();
        return auth.getName();
    }
    @PostMapping("/user") // Add user
    public @ResponseBody String addNewUser(@RequestBody String jsonStr) throws JSONException
    {
        JSONObject obj=new JSONObject(jsonStr);
        User n=new User();
        Optional<User> temp=this.userRepository.findById(obj.getString("username"));
        if(temp.isPresent())
            return "USER ALLREADY EXISTS SORRY";
        n.setUserName(obj.getString("username"));
        n.setPassword(obj.getString("password"));
        n.setEmail(obj.getString("email"));
        n.setFirstName(obj.getString("firstname"));
        n.setLastName(obj.getString("lastname"));
        n.setPhoneNumber(obj.getString("phonenumber"));
        n.setRenter(obj.getBoolean("renterReq"));
        if(obj.getBoolean("Request"))
        {
            n.setRequestforOwner(true);
            n.setOwner(false);
            this.userRepository.save(n);
            return "YOU WILL BE NOTIFIED";
        }
        else{
            n.setOwner(false);
            n.setRequestforOwner(false);
            this.userRepository.save(n);
            return "OK";
        }

    }

    @GetMapping("/user/{usn}")
    public @ResponseBody Optional<User> getUserById(@PathVariable String usn)
    {
       //return userRepository.FindByUsername(usn);
        Optional<User>Result=userRepository.findById(usn);
       if(!Result.isPresent())
            return null;
         User temp=Result.get();
         return Result;

    }

    @PutMapping("user/{username}")
    public @ResponseBody String updatePassword(@RequestBody String jsonStr,@PathVariable String username) throws  JSONException
    {

        JSONObject obj=new JSONObject(jsonStr);
        String newPassword=obj.getString("newPassword");
        Optional<User> usr=userRepository.findById(username);
        if(!usr.isPresent())
            return "WRONG USERNAME";
        User found=usr.get();
        found.setPassword(newPassword);
        found.setLastName(obj.getString("LastName"));
        found.setPhoneNumber(obj.getString("PhoneNumber"));
        found.setFirstName(obj.getString("FirstName"));
        found.setEmail(obj.getString("email"));
        this.userRepository.save(found);
        return "YOUR PASSWORD HAS CHANGED";
    }


    ///////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////
    @PostMapping("/user/{username}/Apartments/{id}/Bookings")
    public @ResponseBody String BookApp(@RequestBody String jsonStr,@PathVariable String username,@PathVariable Integer id) throws JSONException{
        JSONObject obj=new JSONObject(jsonStr);
        System.out.println("CALLS");
        String renter= username;
        System.out.println(renter);
        JSONArray jArray=obj.getJSONArray("Dates");
        ArrayList<String> listdata = new ArrayList<String>();
        if (jArray != null) {
            for (int i=0;i<jArray.length();i++){
                listdata.add(jArray.getString(i));
            }
        }
        appartment temp=this.appartmentRepository.findById(id).get();
        temp.removeDates(listdata);
        this.appartmentRepository.save(temp);
        Booking n=new Booking();
        n.setAppId(id);
        n.setAppartment(temp);
        n.setLocation(temp.getLocation());
        n.setUsr(this.userRepository.findById(renter).get());
        n.setUserName(renter);
        n.setDatesBooked(listdata);
        System.out.println("I am booking It");
        this.bookingRepository.save(n);
        return "OK";
    }
    @GetMapping("user/Apartment/Bookings")
    @ResponseBody Iterable< Booking> getBookings(@RequestParam("id") Integer appId){
        return this.bookingRepository.findByAppId(appId);
    }
    @GetMapping("user/{username}/Bookings")
    @ResponseBody Iterable<Booking> getMyBookings(@PathVariable  String username){
        return this.bookingRepository.findByUserName(username);
    }


    @PutMapping("/user/ProfilePic/{usn}")
    public @ResponseBody byte[] uploadProfilePic(@RequestParam("imgFile") MultipartFile file,@PathVariable String usn) throws IOException {
        System.out.println("fuck java"+usn);
        User temp=this.userRepository.findById(usn).get();
        temp.setPic(file.getBytes());
        userRepository.save(temp);
        return temp.getPic();
    }
    @GetMapping("/user/ProfilePic/{usn}")
    public  @ResponseBody byte[] getProfilePic(@PathVariable String usn){
        return this.userRepository.findById(usn).get().getPic();
    }
  @PutMapping("/Bookings/{id}")
    public  @ResponseBody String markBooking(@PathVariable String id ){
        Booking b=this.bookingRepository.findById(Integer.parseInt(id)).get();
        b.setHasReviewed(true);
        this.bookingRepository.save(b);
        return "OK";
  }
    @GetMapping("user/{usn}/is-owner")
    public  @ResponseBody Boolean getPermissionToPost(@PathVariable String usn){
        User usr=this.userRepository.findById(usn).get();
        if(!usn.equals("admin1'"))
          return  usr.getOwner();
        return true; //admin has permission to everything
    }
}
